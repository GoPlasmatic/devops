name: Release Reframe Application

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (skip release)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Reframe repository
        uses: actions/checkout@v4
        with:
          repository: GoPlasmatic/Reframe
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-reframe-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-reframe-
            ${{ runner.os }}-cargo-
      
      - name: Check code formatting
        run: cargo fmt -- --check
        
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Get package info
        id: package_info
        run: |
          PACKAGE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          PACKAGE_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Application: $PACKAGE_NAME v$PACKAGE_VERSION"
      
      - name: Build release binaries
        run: |
          cargo build --release
          echo "Binary built at: target/release/${{ steps.package_info.outputs.name }}"
      
      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Create and push tag
        id: tag
        run: |
          TAG="v${{ steps.package_info.outputs.version }}"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            git tag -a "$TAG" -m "Release $TAG - Reframe application"
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Package release artifacts
        if: steps.tag.outputs.exists != 'true'
        run: |
          mkdir -p release-artifacts
          cp target/release/${{ steps.package_info.outputs.name }} release-artifacts/
          cp README.md release-artifacts/ 2>/dev/null || echo "No README.md found"
          cp LICENSE release-artifacts/ 2>/dev/null || echo "No LICENSE found"
          
          cd release-artifacts
          tar -czf ../reframe-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz *
          cd ..
          
          echo "Release artifacts packaged"
      
      - name: Create GitHub Release
        if: steps.tag.outputs.exists != 'true' && inputs.dry_run != true
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          release_name: Reframe v${{ steps.package_info.outputs.version }}
          body: |
            ## Reframe v${{ steps.package_info.outputs.version }}
            
            ### Installation
            
            Download the binary for your platform and make it executable:
            ```bash
            tar -xzf reframe-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz
            chmod +x reframe
            ./reframe --version
            ```
            
            ### Building from source
            ```bash
            git clone https://github.com/GoPlasmatic/Reframe.git
            cd Reframe
            cargo build --release
            ```
            
            ### Documentation
            - [Repository](https://github.com/GoPlasmatic/Reframe)
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        if: steps.tag.outputs.exists != 'true' && inputs.dry_run != true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./reframe-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz
          asset_name: reframe-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz
          asset_content_type: application/gzip
      
      - name: Release summary
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "üîç DRY RUN: Skipping release"
            echo "Would have released Reframe v${{ steps.package_info.outputs.version }}"
          else
            echo "‚úÖ Released Reframe v${{ steps.package_info.outputs.version }}"
            echo "üì¶ Binary package: reframe-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz"
            echo "üè∑Ô∏è Git tag: v${{ steps.package_info.outputs.version }}"
          fi