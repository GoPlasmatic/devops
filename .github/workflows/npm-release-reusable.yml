name: Reusable NPM Release Workflow

on:
  workflow_call:
    inputs:
      repository:
        description: 'Target repository (e.g., GoPlasmatic/Sandbox)'
        required: true
        type: string
      working-directory:
        description: 'Working directory for npm commands'
        required: false
        type: string
        default: 'website'
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      dry-run:
        description: 'Dry run (skip release)'
        required: false
        type: boolean
        default: false
      docker-enabled:
        description: 'Enable Docker image build and push'
        required: false
        type: boolean
        default: false
      docker-image-name:
        description: 'Docker image name (required if docker-enabled)'
        required: false
        type: string
      docker-build-args:
        description: 'Docker build arguments (e.g., "ARG1=value1 ARG2=value2")'
        required: false
        type: string
        default: ''
    secrets:
      GH_PAT:
        required: true
      ACR_URL:
        required: false
      ACR_USERNAME:
        required: false
      ACR_PASSWORD:
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Run tests
        working-directory: ${{ inputs.working-directory }}
        run: npm test --if-present

      - name: Build application
        working-directory: ${{ inputs.working-directory }}
        run: npm run build

      - name: Get version from package.json
        id: get_version
        working-directory: ${{ inputs.working-directory }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Handle existing tag
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          if [ "${{ inputs.docker-enabled }}" == "true" ]; then
            echo "Warning: Version ${{ steps.get_version.outputs.version }} already exists as a tag"
            echo "Proceeding with Docker image build and push only"
          else
            echo "Error: Version ${{ steps.get_version.outputs.version }} already exists as a tag"
            echo "Please update the version in package.json before releasing"
            exit 1
          fi

      - name: Check Dockerfile exists
        if: inputs.docker-enabled && !inputs.dry-run
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile not found in repository root"
            echo "Please ensure a Dockerfile exists in the repository before enabling Docker builds"
            exit 1
          else
            echo "Dockerfile found, proceeding with build"
          fi

      - name: Build Docker image
        if: inputs.docker-enabled && !inputs.dry-run
        run: |
          BUILD_ARGS=""
          if [ -n "${{ inputs.docker-build-args }}" ]; then
            for arg in ${{ inputs.docker-build-args }}; do
              BUILD_ARGS="$BUILD_ARGS --build-arg $arg"
            done
          fi
          docker build $BUILD_ARGS -t ${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }} .
          docker tag ${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }} ${{ inputs.docker-image-name }}:latest

      - name: Log in to Azure Container Registry
        if: inputs.docker-enabled && !inputs.dry-run
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker image to ACR
        if: inputs.docker-enabled && !inputs.dry-run
        run: |
          docker tag ${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }} ${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }}
          docker tag ${{ inputs.docker-image-name }}:latest ${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:latest
          docker push ${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }}
          docker push ${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:latest

      - name: Create and push tag
        if: ${{ !inputs.dry-run && steps.check_tag.outputs.exists != 'true' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release version ${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"
          echo "Tag v${{ steps.get_version.outputs.version }} created and pushed successfully"

      - name: Check if release exists
        id: check_release
        if: '!inputs.dry-run'
        run: |
          # Debug: List all releases first
          echo "=== Listing all releases for ${{ inputs.repository }} ==="
          gh release list --repo ${{ inputs.repository }} --limit 10 || echo "Failed to list releases"
          echo "=== End of release list ==="
          
          # Try multiple methods to detect if release exists
          RELEASE_EXISTS=false
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Method 1: Try gh release view
          echo "Checking with gh release view for v${VERSION}..."
          if gh release view "v${VERSION}" --repo ${{ inputs.repository }} >/dev/null 2>&1; then
            RELEASE_EXISTS=true
            echo "✓ Found release using 'gh release view'"
          else
            echo "✗ Not found with 'gh release view'"
          fi
          
          # Method 2: Check via gh release list if view failed
          if [ "$RELEASE_EXISTS" = "false" ]; then
            echo "Checking with gh release list for v${VERSION}..."
            RELEASES=$(gh release list --repo ${{ inputs.repository }} --limit 100 2>/dev/null || echo "")
            if echo "$RELEASES" | grep -q "^v${VERSION}\s"; then
              RELEASE_EXISTS=true
              echo "✓ Found release using 'gh release list'"
            else
              echo "✗ Not found with 'gh release list'"
            fi
          fi
          
          # Method 3: Check via GitHub API directly
          if [ "$RELEASE_EXISTS" = "false" ]; then
            echo "Checking with GitHub API for v${VERSION}..."
            if gh api "repos/${{ inputs.repository }}/releases/tags/v${VERSION}" >/dev/null 2>&1; then
              RELEASE_EXISTS=true
              echo "✓ Found release using GitHub API"
            else
              echo "✗ Not found with GitHub API"
              # Try without the 'v' prefix as well
              echo "Checking with GitHub API for ${VERSION} (without 'v' prefix)..."
              if gh api "repos/${{ inputs.repository }}/releases/tags/${VERSION}" >/dev/null 2>&1; then
                RELEASE_EXISTS=true
                echo "✓ Found release using GitHub API (without 'v' prefix)"
              else
                echo "✗ Not found with GitHub API (without 'v' prefix)"
              fi
            fi
          fi
          
          if [ "$RELEASE_EXISTS" = "true" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::warning::Release v${VERSION} already exists - skipping release creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${VERSION} does not exist - will attempt to create new release"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create GitHub Release
        if: ${{ !inputs.dry-run && steps.check_release.outputs.exists == 'false' }}
        uses: actions/create-release@v1
        continue-on-error: true
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Release v${{ steps.get_version.outputs.version }}
            
            ### Changes
            - See commit history for changes
            
            ### Docker Image
            ${{ inputs.docker-enabled && format('Docker image available at: `{0}/{1}:{2}`', secrets.ACR_URL, inputs.docker-image-name, steps.get_version.outputs.version) || 'No Docker image for this release' }}
          draft: false
          prerelease: false
      
      - name: Handle release creation failure
        if: ${{ !inputs.dry-run && steps.check_release.outputs.exists == 'false' && steps.create_release.outcome == 'failure' }}
        run: |
          echo "::warning::Failed to create release for tag v${{ steps.get_version.outputs.version }}"
          echo "This typically happens when a release already exists from a previous run."
          echo ""
          echo "=== Debug: Listing all releases to understand the issue ==="
          gh release list --repo ${{ inputs.repository }} --limit 10 || echo "Failed to list releases"
          echo "=== End of release list ==="
          echo ""
          echo "Attempting to verify if release exists now using multiple methods..."
          
          RELEASE_FOUND=false
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Method 1: Try gh release view
          echo "Checking with gh release view for v${VERSION}..."
          if gh release view "v${VERSION}" --repo ${{ inputs.repository }} >/dev/null 2>&1; then
            RELEASE_FOUND=true
            echo "✓ Found release using 'gh release view'"
          else
            echo "✗ Not found with 'gh release view'"
          fi
          
          # Method 2: Check via gh release list
          if [ "$RELEASE_FOUND" = "false" ]; then
            echo "Checking with gh release list for v${VERSION}..."
            if gh release list --repo ${{ inputs.repository }} --limit 100 | grep -q "v${VERSION}"; then
              RELEASE_FOUND=true
              echo "✓ Found release using 'gh release list'"
            else
              echo "✗ Not found with 'gh release list'"
            fi
          fi
          
          # Method 3: Check via GitHub API directly
          if [ "$RELEASE_FOUND" = "false" ]; then
            echo "Checking with GitHub API for v${VERSION}..."
            if gh api "repos/${{ inputs.repository }}/releases/tags/v${VERSION}" >/dev/null 2>&1; then
              RELEASE_FOUND=true
              echo "✓ Found release using GitHub API"
            else
              echo "✗ Not found with GitHub API"
              # Try without the 'v' prefix
              echo "Checking with GitHub API for ${VERSION} (without 'v' prefix)..."
              if gh api "repos/${{ inputs.repository }}/releases/tags/${VERSION}" >/dev/null 2>&1; then
                RELEASE_FOUND=true
                echo "✓ Found release using GitHub API (without 'v' prefix)"
              else
                echo "✗ Not found with GitHub API (without 'v' prefix)"
              fi
            fi
          fi
          
          # Method 4: Use actions/create-release error as confirmation
          echo ""
          echo "The error 'already_exists' from actions/create-release indicates the release DOES exist."
          echo "This is likely a permission or visibility issue with the gh CLI."
          echo ""
          
          if [ "$RELEASE_FOUND" = "true" ]; then
            echo "::notice::Release confirmed to exist for v${VERSION}"
            echo "The workflow will continue normally."
          else
            echo "::warning::Could not verify release for v${VERSION} with gh CLI, but create-release says it exists"
            echo "This suggests the release was created but there may be a permission issue."
            echo "Since the tag and Docker image are more important, continuing the workflow..."
            echo ""
            echo "Possible causes:"
            echo "  - The PAT token may not have sufficient permissions to view releases"
            echo "  - There might be a delay in GitHub's API consistency"
            echo "  - The release might be in a draft or pre-release state"
            echo ""
            echo "The workflow will continue to ensure Docker images are built and pushed if configured."
          fi
          
          # Don't fail the workflow since the release likely exists based on the error message
          echo "::notice::Continuing workflow despite release verification issues"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Update existing release
        if: ${{ !inputs.dry-run && steps.check_release.outputs.exists == 'true' && inputs.docker-enabled }}
        run: |
          echo "Release already exists, updating with Docker image information"
          cat > release-notes.md << EOF
          ## Release v${{ steps.get_version.outputs.version }}
          
          ### Changes
          - See commit history for changes
          
          ### Docker Image
          Docker image available at: \`${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }}\`
          EOF
          
          gh release edit "v${{ steps.get_version.outputs.version }}" \
            --repo ${{ inputs.repository }} \
            --notes-file release-notes.md
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.dry-run }}" == "true" ]; then
            echo "**DRY RUN MODE** - No actual release was created" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Successfully released version ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Repository: ${{ inputs.repository }}" >> $GITHUB_STEP_SUMMARY
            echo "- Tag: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.docker-enabled }}" == "true" ]; then
              echo "- Docker Image: ${{ secrets.ACR_URL }}/${{ inputs.docker-image-name }}:${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi