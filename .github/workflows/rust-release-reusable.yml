name: Reusable Rust Release Workflow

on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository to release (e.g., GoPlasmatic/datalogic-rs)'
        required: true
        type: string
      package-type:
        description: 'Package type: library or application'
        required: false
        type: string
        default: 'library'
      dry-run:
        description: 'Dry run (skip publishing)'
        required: false
        type: boolean
        default: false
    secrets:
      GH_PAT:
        description: 'GitHub Personal Access Token for pushing tags'
        required: true
      CRATES_IO_TOKEN:
        description: 'Token for publishing to crates.io'
        required: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.repository }}
          cache-on-failure: true
      
      - name: Check code formatting
        run: cargo fmt -- --check
        
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Get package info
        id: package_info
        run: |
          # Check if this is a workspace or single package
          PACKAGE_COUNT=$(cargo metadata --no-deps --format-version 1 | jq '.packages | length')
          
          if [ "$PACKAGE_COUNT" -gt 1 ]; then
            # For workspace, find the appropriate package
            if [ "${{ inputs.package-type }}" = "application" ]; then
              # Find binary package
              PACKAGE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.targets[]?.kind[]? == "bin") | .name' | head -n1)
            else
              # Find publishable library package
              PACKAGE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.publish != false) | .name' | head -n1)
            fi
            PACKAGE_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r ".packages[] | select(.name == \"$PACKAGE_NAME\") | .version")
          else
            # Single package
            PACKAGE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
            PACKAGE_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          fi
          
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
          echo "Package: $PACKAGE_NAME v$PACKAGE_VERSION (workspace: $PACKAGE_COUNT packages)"
      
      - name: Check if version exists on crates.io
        if: inputs.package-type == 'library'
        id: check_crates
        run: |
          CRATE_VERSION=$(curl -s https://crates.io/api/v1/crates/${{ steps.package_info.outputs.name }} | jq -r '.crate.max_version // "none"')
          echo "Current crates.io version: $CRATE_VERSION"
          echo "Local version: ${{ steps.package_info.outputs.version }}"
          
          if [ "$CRATE_VERSION" = "${{ steps.package_info.outputs.version }}" ]; then
            echo "Version ${{ steps.package_info.outputs.version }} already exists on crates.io"
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Version ${{ steps.package_info.outputs.version }} is new"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Create and push tag
        id: tag
        run: |
          TAG="v${{ steps.package_info.outputs.version }}"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            git tag -a "$TAG" -m "Release $TAG - ${{ steps.package_info.outputs.name }}"
            
            # Configure remote with PAT
            git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ inputs.repository }}.git
            
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build release (application)
        if: inputs.package-type == 'application'
        run: |
          if [ "${{ steps.package_info.outputs.count }}" -gt 1 ]; then
            # Workspace: build specific package
            cargo build --release --package ${{ steps.package_info.outputs.name }}
          else
            # Single package
            cargo build --release
          fi
          echo "Binary built at: target/release/${{ steps.package_info.outputs.name }}"
      
      - name: Package release artifacts (application)
        if: inputs.package-type == 'application' && steps.tag.outputs.exists != 'true'
        run: |
          mkdir -p release-artifacts
          cp target/release/${{ steps.package_info.outputs.name }} release-artifacts/
          cp README.md release-artifacts/ 2>/dev/null || echo "No README.md found"
          cp LICENSE release-artifacts/ 2>/dev/null || echo "No LICENSE found"
          
          cd release-artifacts
          tar -czf ../${{ steps.package_info.outputs.name }}-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz *
          cd ..
          
          echo "Release artifacts packaged"
      
      - name: Create GitHub Release
        if: steps.tag.outputs.exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          name: ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }}
          body: |
            ## ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }}
            
            ### Installation
            ${{ inputs.package-type == 'library' && format('Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            {0} = "{1}"
            ```', steps.package_info.outputs.name, steps.package_info.outputs.version) || format('Download and extract the binary:
            ```bash
            tar -xzf {0}-v{1}-linux-x86_64.tar.gz
            chmod +x {0}
            ./{0} --version
            ```', steps.package_info.outputs.name, steps.package_info.outputs.version) }}
            
            ### Documentation
            - [Repository](https://github.com/${{ inputs.repository }})
            ${{ inputs.package-type == 'library' && format('- [API Documentation](https://docs.rs/{0})', steps.package_info.outputs.name) || '' }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_PAT }}
          files: ${{ inputs.package-type == 'application' && format('{0}-v{1}-linux-x86_64.tar.gz', steps.package_info.outputs.name, steps.package_info.outputs.version) || '' }}
      
      - name: Publish to crates.io (library)
        if: inputs.package-type == 'library' && inputs.dry-run != true && steps.check_crates.outputs.exists != 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          if [ "${{ steps.package_info.outputs.count }}" -gt 1 ]; then
            # Workspace: specify package name
            cargo publish --package ${{ steps.package_info.outputs.name }} --no-verify
          else
            # Single package
            cargo publish --no-verify
          fi
          echo "‚úÖ Published ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }} to crates.io"
      
      - name: Release summary
        run: |
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "üîç DRY RUN: Skipping release"
            echo "Would have released ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }}"
          else
            echo "‚úÖ Released ${{ steps.package_info.outputs.name }} v${{ steps.package_info.outputs.version }}"
            if [ "${{ inputs.package-type }}" = "application" ]; then
              echo "üì¶ Binary package: ${{ steps.package_info.outputs.name }}-v${{ steps.package_info.outputs.version }}-linux-x86_64.tar.gz"
            else
              echo "üì¶ Published to crates.io"
            fi
            echo "üè∑Ô∏è Git tag: v${{ steps.package_info.outputs.version }}"
          fi